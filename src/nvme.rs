/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const NVMF_NQN_FIELD_LEN: u32 = 256;
pub const NVMF_NQN_SIZE: u32 = 223;
pub const NVMF_TRSVCID_SIZE: u32 = 32;
pub const NVMF_TRADDR_SIZE: u32 = 256;
pub const NVMF_TSAS_SIZE: u32 = 256;
pub const NVME_DISC_SUBSYS_NAME: &[u8; 37] = b"nqn.2014-08.org.nvmexpress.discovery\0";
pub const NVME_RDMA_IP_PORT: u32 = 4420;
pub const NVME_NSID_ALL: u32 = 4294967295;
pub const NVME_AQ_DEPTH: u32 = 32;
pub const NVME_NR_AEN_COMMANDS: u32 = 1;
pub const NVME_AQ_BLK_MQ_DEPTH: u32 = 31;
pub const NVME_AQ_MQ_TAG_DEPTH: u32 = 30;
pub const NVME_ADM_SQES: u32 = 6;
pub const NVME_NVM_IOSQES: u32 = 6;
pub const NVME_NVM_IOCQES: u32 = 4;
pub const NVME_NIDT_EUI64_LEN: u32 = 8;
pub const NVME_NIDT_NGUID_LEN: u32 = 16;
pub const NVME_NIDT_UUID_LEN: u32 = 16;
pub const NVME_NIDT_CSI_LEN: u32 = 1;
pub const NVME_ANA_LOG_RGO: u32 = 1;
pub const NVME_DSM_MAX_RANGES: u32 = 256;
pub const NVME_MAX_CHANGED_NAMESPACES: u32 = 1024;
pub const NVME_IDENTIFY_DATA_SIZE: u32 = 4096;
pub const NVME_CNTLID_MIN: u32 = 1;
pub const NVME_CNTLID_MAX: u32 = 65519;
pub const NVME_CNTLID_DYNAMIC: u32 = 65535;
pub const MAX_DISC_LOGS: u32 = 255;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __u32 = ::std::os::raw::c_uint;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type __le16 = __u16;
pub type __le32 = __u32;
pub type __le64 = __u64;
pub type bool_ = bool;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uuid_t {
    pub b: [__u8; 16usize],
}
pub const nvme_subsys_type_NVME_NQN_DISC: nvme_subsys_type = 1;
pub const nvme_subsys_type_NVME_NQN_NVME: nvme_subsys_type = 2;
pub type nvme_subsys_type = ::std::os::raw::c_uint;
pub const nvme_ctrl_type_NVME_CTRL_IO: nvme_ctrl_type = 1;
pub const nvme_ctrl_type_NVME_CTRL_DISC: nvme_ctrl_type = 2;
pub const nvme_ctrl_type_NVME_CTRL_ADMIN: nvme_ctrl_type = 3;
pub type nvme_ctrl_type = ::std::os::raw::c_uint;
pub const nvme_dctype_NVME_DCTYPE_NOT_REPORTED: nvme_dctype = 0;
pub const nvme_dctype_NVME_DCTYPE_DDC: nvme_dctype = 1;
pub const nvme_dctype_NVME_DCTYPE_CDC: nvme_dctype = 2;
pub type nvme_dctype = ::std::os::raw::c_uint;
pub const NVMF_ADDR_FAMILY_PCI: _bindgen_ty_2 = 0;
pub const NVMF_ADDR_FAMILY_IP4: _bindgen_ty_2 = 1;
pub const NVMF_ADDR_FAMILY_IP6: _bindgen_ty_2 = 2;
pub const NVMF_ADDR_FAMILY_IB: _bindgen_ty_2 = 3;
pub const NVMF_ADDR_FAMILY_FC: _bindgen_ty_2 = 4;
pub const NVMF_ADDR_FAMILY_LOOP: _bindgen_ty_2 = 254;
pub const NVMF_ADDR_FAMILY_MAX: _bindgen_ty_2 = 255;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const NVMF_TRTYPE_RDMA: _bindgen_ty_3 = 1;
pub const NVMF_TRTYPE_FC: _bindgen_ty_3 = 2;
pub const NVMF_TRTYPE_TCP: _bindgen_ty_3 = 3;
pub const NVMF_TRTYPE_LOOP: _bindgen_ty_3 = 254;
pub const NVMF_TRTYPE_MAX: _bindgen_ty_3 = 255;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const NVMF_TREQ_NOT_SPECIFIED: _bindgen_ty_4 = 0;
pub const NVMF_TREQ_REQUIRED: _bindgen_ty_4 = 1;
pub const NVMF_TREQ_NOT_REQUIRED: _bindgen_ty_4 = 2;
pub const NVMF_TREQ_DISABLE_SQFLOW: _bindgen_ty_4 = 4;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const NVMF_RDMA_QPTYPE_CONNECTED: _bindgen_ty_5 = 1;
pub const NVMF_RDMA_QPTYPE_DATAGRAM: _bindgen_ty_5 = 2;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const NVMF_RDMA_PRTYPE_NOT_SPECIFIED: _bindgen_ty_6 = 1;
pub const NVMF_RDMA_PRTYPE_IB: _bindgen_ty_6 = 2;
pub const NVMF_RDMA_PRTYPE_ROCE: _bindgen_ty_6 = 3;
pub const NVMF_RDMA_PRTYPE_ROCEV2: _bindgen_ty_6 = 4;
pub const NVMF_RDMA_PRTYPE_IWARP: _bindgen_ty_6 = 5;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const NVMF_RDMA_CMS_RDMA_CM: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const NVME_REG_CAP: _bindgen_ty_8 = 0;
pub const NVME_REG_VS: _bindgen_ty_8 = 8;
pub const NVME_REG_INTMS: _bindgen_ty_8 = 12;
pub const NVME_REG_INTMC: _bindgen_ty_8 = 16;
pub const NVME_REG_CC: _bindgen_ty_8 = 20;
pub const NVME_REG_CSTS: _bindgen_ty_8 = 28;
pub const NVME_REG_NSSR: _bindgen_ty_8 = 32;
pub const NVME_REG_AQA: _bindgen_ty_8 = 36;
pub const NVME_REG_ASQ: _bindgen_ty_8 = 40;
pub const NVME_REG_ACQ: _bindgen_ty_8 = 48;
pub const NVME_REG_CMBLOC: _bindgen_ty_8 = 56;
pub const NVME_REG_CMBSZ: _bindgen_ty_8 = 60;
pub const NVME_REG_BPINFO: _bindgen_ty_8 = 64;
pub const NVME_REG_BPRSEL: _bindgen_ty_8 = 68;
pub const NVME_REG_BPMBL: _bindgen_ty_8 = 72;
pub const NVME_REG_CMBMSC: _bindgen_ty_8 = 80;
pub const NVME_REG_PMRCAP: _bindgen_ty_8 = 3584;
pub const NVME_REG_PMRCTL: _bindgen_ty_8 = 3588;
pub const NVME_REG_PMRSTS: _bindgen_ty_8 = 3592;
pub const NVME_REG_PMREBS: _bindgen_ty_8 = 3596;
pub const NVME_REG_PMRSWTP: _bindgen_ty_8 = 3600;
pub const NVME_REG_DBS: _bindgen_ty_8 = 4096;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const NVME_CMBSZ_SQS: _bindgen_ty_9 = 1;
pub const NVME_CMBSZ_CQS: _bindgen_ty_9 = 2;
pub const NVME_CMBSZ_LISTS: _bindgen_ty_9 = 4;
pub const NVME_CMBSZ_RDS: _bindgen_ty_9 = 8;
pub const NVME_CMBSZ_WDS: _bindgen_ty_9 = 16;
pub const NVME_CMBSZ_SZ_SHIFT: _bindgen_ty_9 = 12;
pub const NVME_CMBSZ_SZ_MASK: _bindgen_ty_9 = 1048575;
pub const NVME_CMBSZ_SZU_SHIFT: _bindgen_ty_9 = 8;
pub const NVME_CMBSZ_SZU_MASK: _bindgen_ty_9 = 15;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const NVME_CC_ENABLE: _bindgen_ty_10 = 1;
pub const NVME_CC_EN_SHIFT: _bindgen_ty_10 = 0;
pub const NVME_CC_CSS_SHIFT: _bindgen_ty_10 = 4;
pub const NVME_CC_MPS_SHIFT: _bindgen_ty_10 = 7;
pub const NVME_CC_AMS_SHIFT: _bindgen_ty_10 = 11;
pub const NVME_CC_SHN_SHIFT: _bindgen_ty_10 = 14;
pub const NVME_CC_IOSQES_SHIFT: _bindgen_ty_10 = 16;
pub const NVME_CC_IOCQES_SHIFT: _bindgen_ty_10 = 20;
pub const NVME_CC_CSS_NVM: _bindgen_ty_10 = 0;
pub const NVME_CC_CSS_CSI: _bindgen_ty_10 = 96;
pub const NVME_CC_CSS_MASK: _bindgen_ty_10 = 112;
pub const NVME_CC_AMS_RR: _bindgen_ty_10 = 0;
pub const NVME_CC_AMS_WRRU: _bindgen_ty_10 = 2048;
pub const NVME_CC_AMS_VS: _bindgen_ty_10 = 14336;
pub const NVME_CC_SHN_NONE: _bindgen_ty_10 = 0;
pub const NVME_CC_SHN_NORMAL: _bindgen_ty_10 = 16384;
pub const NVME_CC_SHN_ABRUPT: _bindgen_ty_10 = 32768;
pub const NVME_CC_SHN_MASK: _bindgen_ty_10 = 49152;
pub const NVME_CC_IOSQES: _bindgen_ty_10 = 393216;
pub const NVME_CC_IOCQES: _bindgen_ty_10 = 4194304;
pub const NVME_CAP_CSS_NVM: _bindgen_ty_10 = 1;
pub const NVME_CAP_CSS_CSI: _bindgen_ty_10 = 64;
pub const NVME_CSTS_RDY: _bindgen_ty_10 = 1;
pub const NVME_CSTS_CFS: _bindgen_ty_10 = 2;
pub const NVME_CSTS_NSSRO: _bindgen_ty_10 = 16;
pub const NVME_CSTS_PP: _bindgen_ty_10 = 32;
pub const NVME_CSTS_SHST_NORMAL: _bindgen_ty_10 = 0;
pub const NVME_CSTS_SHST_OCCUR: _bindgen_ty_10 = 4;
pub const NVME_CSTS_SHST_CMPLT: _bindgen_ty_10 = 8;
pub const NVME_CSTS_SHST_MASK: _bindgen_ty_10 = 12;
pub const NVME_CMBMSC_CRE: _bindgen_ty_10 = 1;
pub const NVME_CMBMSC_CMSE: _bindgen_ty_10 = 2;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_id_power_state {
    pub max_power: __le16,
    pub rsvd2: __u8,
    pub flags: __u8,
    pub entry_lat: __le32,
    pub exit_lat: __le32,
    pub read_tput: __u8,
    pub read_lat: __u8,
    pub write_tput: __u8,
    pub write_lat: __u8,
    pub idle_power: __le16,
    pub idle_scale: __u8,
    pub rsvd19: __u8,
    pub active_power: __le16,
    pub active_work_scale: __u8,
    pub rsvd23: [__u8; 9usize],
}
pub const NVME_PS_FLAGS_MAX_POWER_SCALE: _bindgen_ty_11 = 1;
pub const NVME_PS_FLAGS_NON_OP_STATE: _bindgen_ty_11 = 2;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const nvme_ctrl_attr_NVME_CTRL_ATTR_HID_128_BIT: nvme_ctrl_attr = 1;
pub const nvme_ctrl_attr_NVME_CTRL_ATTR_TBKAS: nvme_ctrl_attr = 64;
pub type nvme_ctrl_attr = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvme_id_ctrl {
    pub vid: __le16,
    pub ssvid: __le16,
    pub sn: [::std::os::raw::c_char; 20usize],
    pub mn: [::std::os::raw::c_char; 40usize],
    pub fr: [::std::os::raw::c_char; 8usize],
    pub rab: __u8,
    pub ieee: [__u8; 3usize],
    pub cmic: __u8,
    pub mdts: __u8,
    pub cntlid: __le16,
    pub ver: __le32,
    pub rtd3r: __le32,
    pub rtd3e: __le32,
    pub oaes: __le32,
    pub ctratt: __le32,
    pub rsvd100: [__u8; 11usize],
    pub cntrltype: __u8,
    pub fguid: [__u8; 16usize],
    pub crdt1: __le16,
    pub crdt2: __le16,
    pub crdt3: __le16,
    pub rsvd134: [__u8; 122usize],
    pub oacs: __le16,
    pub acl: __u8,
    pub aerl: __u8,
    pub frmw: __u8,
    pub lpa: __u8,
    pub elpe: __u8,
    pub npss: __u8,
    pub avscc: __u8,
    pub apsta: __u8,
    pub wctemp: __le16,
    pub cctemp: __le16,
    pub mtfa: __le16,
    pub hmpre: __le32,
    pub hmmin: __le32,
    pub tnvmcap: [__u8; 16usize],
    pub unvmcap: [__u8; 16usize],
    pub rpmbs: __le32,
    pub edstt: __le16,
    pub dsto: __u8,
    pub fwug: __u8,
    pub kas: __le16,
    pub hctma: __le16,
    pub mntmt: __le16,
    pub mxtmt: __le16,
    pub sanicap: __le32,
    pub hmminds: __le32,
    pub hmmaxd: __le16,
    pub rsvd338: [__u8; 4usize],
    pub anatt: __u8,
    pub anacap: __u8,
    pub anagrpmax: __le32,
    pub nanagrpid: __le32,
    pub rsvd352: [__u8; 160usize],
    pub sqes: __u8,
    pub cqes: __u8,
    pub maxcmd: __le16,
    pub nn: __le32,
    pub oncs: __le16,
    pub fuses: __le16,
    pub fna: __u8,
    pub vwc: __u8,
    pub awun: __le16,
    pub awupf: __le16,
    pub nvscc: __u8,
    pub nwpc: __u8,
    pub acwu: __le16,
    pub rsvd534: [__u8; 2usize],
    pub sgls: __le32,
    pub mnan: __le32,
    pub rsvd544: [__u8; 224usize],
    pub subnqn: [::std::os::raw::c_char; 256usize],
    pub rsvd1024: [__u8; 768usize],
    pub ioccsz: __le32,
    pub iorcsz: __le32,
    pub icdoff: __le16,
    pub ctrattr: __u8,
    pub msdbd: __u8,
    pub rsvd1804: [__u8; 2usize],
    pub dctype: __u8,
    pub rsvd1807: [__u8; 241usize],
    pub psd: [nvme_id_power_state; 32usize],
    pub vs: [__u8; 1024usize],
}
impl Default for nvme_id_ctrl {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NVME_CTRL_CMIC_MULTI_CTRL: _bindgen_ty_12 = 2;
pub const NVME_CTRL_CMIC_ANA: _bindgen_ty_12 = 8;
pub const NVME_CTRL_ONCS_COMPARE: _bindgen_ty_12 = 1;
pub const NVME_CTRL_ONCS_WRITE_UNCORRECTABLE: _bindgen_ty_12 = 2;
pub const NVME_CTRL_ONCS_DSM: _bindgen_ty_12 = 4;
pub const NVME_CTRL_ONCS_WRITE_ZEROES: _bindgen_ty_12 = 8;
pub const NVME_CTRL_ONCS_RESERVATIONS: _bindgen_ty_12 = 32;
pub const NVME_CTRL_ONCS_TIMESTAMP: _bindgen_ty_12 = 64;
pub const NVME_CTRL_VWC_PRESENT: _bindgen_ty_12 = 1;
pub const NVME_CTRL_OACS_SEC_SUPP: _bindgen_ty_12 = 1;
pub const NVME_CTRL_OACS_NS_MNGT_SUPP: _bindgen_ty_12 = 8;
pub const NVME_CTRL_OACS_DIRECTIVES: _bindgen_ty_12 = 32;
pub const NVME_CTRL_OACS_DBBUF_SUPP: _bindgen_ty_12 = 256;
pub const NVME_CTRL_LPA_CMD_EFFECTS_LOG: _bindgen_ty_12 = 2;
pub const NVME_CTRL_CTRATT_128_ID: _bindgen_ty_12 = 1;
pub const NVME_CTRL_CTRATT_NON_OP_PSP: _bindgen_ty_12 = 2;
pub const NVME_CTRL_CTRATT_NVM_SETS: _bindgen_ty_12 = 4;
pub const NVME_CTRL_CTRATT_READ_RECV_LVLS: _bindgen_ty_12 = 8;
pub const NVME_CTRL_CTRATT_ENDURANCE_GROUPS: _bindgen_ty_12 = 16;
pub const NVME_CTRL_CTRATT_PREDICTABLE_LAT: _bindgen_ty_12 = 32;
pub const NVME_CTRL_CTRATT_NAMESPACE_GRANULARITY: _bindgen_ty_12 = 128;
pub const NVME_CTRL_CTRATT_UUID_LIST: _bindgen_ty_12 = 512;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_lbaf {
    pub ms: __le16,
    pub ds: __u8,
    pub rp: __u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvme_id_ns {
    pub nsze: __le64,
    pub ncap: __le64,
    pub nuse: __le64,
    pub nsfeat: __u8,
    pub nlbaf: __u8,
    pub flbas: __u8,
    pub mc: __u8,
    pub dpc: __u8,
    pub dps: __u8,
    pub nmic: __u8,
    pub rescap: __u8,
    pub fpi: __u8,
    pub dlfeat: __u8,
    pub nawun: __le16,
    pub nawupf: __le16,
    pub nacwu: __le16,
    pub nabsn: __le16,
    pub nabo: __le16,
    pub nabspf: __le16,
    pub noiob: __le16,
    pub nvmcap: [__u8; 16usize],
    pub npwg: __le16,
    pub npwa: __le16,
    pub npdg: __le16,
    pub npda: __le16,
    pub nows: __le16,
    pub rsvd74: [__u8; 18usize],
    pub anagrpid: __le32,
    pub rsvd96: [__u8; 3usize],
    pub nsattr: __u8,
    pub nvmsetid: __le16,
    pub endgid: __le16,
    pub nguid: [__u8; 16usize],
    pub eui64: [__u8; 8usize],
    pub lbaf: [nvme_lbaf; 16usize],
    pub rsvd192: [__u8; 192usize],
    pub vs: [__u8; 3712usize],
}
impl Default for nvme_id_ns {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_zns_lbafe {
    pub zsze: __le64,
    pub zdes: __u8,
    pub rsvd9: [__u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvme_id_ns_zns {
    pub zoc: __le16,
    pub ozcs: __le16,
    pub mar: __le32,
    pub mor: __le32,
    pub rrl: __le32,
    pub frl: __le32,
    pub rsvd20: [__u8; 2796usize],
    pub lbafe: [nvme_zns_lbafe; 16usize],
    pub rsvd3072: [__u8; 768usize],
    pub vs: [__u8; 256usize],
}
impl Default for nvme_id_ns_zns {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvme_id_ctrl_zns {
    pub zasl: __u8,
    pub rsvd1: [__u8; 4095usize],
}
impl Default for nvme_id_ctrl_zns {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvme_id_ctrl_nvm {
    pub vsl: __u8,
    pub wzsl: __u8,
    pub wusl: __u8,
    pub dmrl: __u8,
    pub dmrsl: __le32,
    pub dmsl: __le64,
    pub rsvd16: [__u8; 4080usize],
}
impl Default for nvme_id_ctrl_nvm {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NVME_ID_CNS_NS: _bindgen_ty_13 = 0;
pub const NVME_ID_CNS_CTRL: _bindgen_ty_13 = 1;
pub const NVME_ID_CNS_NS_ACTIVE_LIST: _bindgen_ty_13 = 2;
pub const NVME_ID_CNS_NS_DESC_LIST: _bindgen_ty_13 = 3;
pub const NVME_ID_CNS_CS_NS: _bindgen_ty_13 = 5;
pub const NVME_ID_CNS_CS_CTRL: _bindgen_ty_13 = 6;
pub const NVME_ID_CNS_NS_PRESENT_LIST: _bindgen_ty_13 = 16;
pub const NVME_ID_CNS_NS_PRESENT: _bindgen_ty_13 = 17;
pub const NVME_ID_CNS_CTRL_NS_LIST: _bindgen_ty_13 = 18;
pub const NVME_ID_CNS_CTRL_LIST: _bindgen_ty_13 = 19;
pub const NVME_ID_CNS_SCNDRY_CTRL_LIST: _bindgen_ty_13 = 21;
pub const NVME_ID_CNS_NS_GRANULARITY: _bindgen_ty_13 = 22;
pub const NVME_ID_CNS_UUID_LIST: _bindgen_ty_13 = 23;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const NVME_CSI_NVM: _bindgen_ty_14 = 0;
pub const NVME_CSI_ZNS: _bindgen_ty_14 = 2;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const NVME_DIR_IDENTIFY: _bindgen_ty_15 = 0;
pub const NVME_DIR_STREAMS: _bindgen_ty_15 = 1;
pub const NVME_DIR_SND_ID_OP_ENABLE: _bindgen_ty_15 = 1;
pub const NVME_DIR_SND_ST_OP_REL_ID: _bindgen_ty_15 = 1;
pub const NVME_DIR_SND_ST_OP_REL_RSC: _bindgen_ty_15 = 2;
pub const NVME_DIR_RCV_ID_OP_PARAM: _bindgen_ty_15 = 1;
pub const NVME_DIR_RCV_ST_OP_PARAM: _bindgen_ty_15 = 1;
pub const NVME_DIR_RCV_ST_OP_STATUS: _bindgen_ty_15 = 2;
pub const NVME_DIR_RCV_ST_OP_RESOURCE: _bindgen_ty_15 = 3;
pub const NVME_DIR_ENDIR: _bindgen_ty_15 = 1;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const NVME_NS_FEAT_THIN: _bindgen_ty_16 = 1;
pub const NVME_NS_FEAT_ATOMICS: _bindgen_ty_16 = 2;
pub const NVME_NS_FEAT_IO_OPT: _bindgen_ty_16 = 16;
pub const NVME_NS_ATTR_RO: _bindgen_ty_16 = 1;
pub const NVME_NS_FLBAS_LBA_MASK: _bindgen_ty_16 = 15;
pub const NVME_NS_FLBAS_META_EXT: _bindgen_ty_16 = 16;
pub const NVME_NS_NMIC_SHARED: _bindgen_ty_16 = 1;
pub const NVME_LBAF_RP_BEST: _bindgen_ty_16 = 0;
pub const NVME_LBAF_RP_BETTER: _bindgen_ty_16 = 1;
pub const NVME_LBAF_RP_GOOD: _bindgen_ty_16 = 2;
pub const NVME_LBAF_RP_DEGRADED: _bindgen_ty_16 = 3;
pub const NVME_NS_DPC_PI_LAST: _bindgen_ty_16 = 16;
pub const NVME_NS_DPC_PI_FIRST: _bindgen_ty_16 = 8;
pub const NVME_NS_DPC_PI_TYPE3: _bindgen_ty_16 = 4;
pub const NVME_NS_DPC_PI_TYPE2: _bindgen_ty_16 = 2;
pub const NVME_NS_DPC_PI_TYPE1: _bindgen_ty_16 = 1;
pub const NVME_NS_DPS_PI_FIRST: _bindgen_ty_16 = 8;
pub const NVME_NS_DPS_PI_MASK: _bindgen_ty_16 = 7;
pub const NVME_NS_DPS_PI_TYPE1: _bindgen_ty_16 = 1;
pub const NVME_NS_DPS_PI_TYPE2: _bindgen_ty_16 = 2;
pub const NVME_NS_DPS_PI_TYPE3: _bindgen_ty_16 = 3;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const NVME_MC_EXTENDED_LBA: _bindgen_ty_17 = 1;
pub const NVME_MC_METADATA_PTR: _bindgen_ty_17 = 2;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_ns_id_desc {
    pub nidt: __u8,
    pub nidl: __u8,
    pub reserved: __le16,
}
pub const NVME_NIDT_EUI64: _bindgen_ty_18 = 1;
pub const NVME_NIDT_NGUID: _bindgen_ty_18 = 2;
pub const NVME_NIDT_UUID: _bindgen_ty_18 = 3;
pub const NVME_NIDT_CSI: _bindgen_ty_18 = 4;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvme_smart_log {
    pub critical_warning: __u8,
    pub temperature: [__u8; 2usize],
    pub avail_spare: __u8,
    pub spare_thresh: __u8,
    pub percent_used: __u8,
    pub endu_grp_crit_warn_sumry: __u8,
    pub rsvd7: [__u8; 25usize],
    pub data_units_read: [__u8; 16usize],
    pub data_units_written: [__u8; 16usize],
    pub host_reads: [__u8; 16usize],
    pub host_writes: [__u8; 16usize],
    pub ctrl_busy_time: [__u8; 16usize],
    pub power_cycles: [__u8; 16usize],
    pub power_on_hours: [__u8; 16usize],
    pub unsafe_shutdowns: [__u8; 16usize],
    pub media_errors: [__u8; 16usize],
    pub num_err_log_entries: [__u8; 16usize],
    pub warning_temp_time: __le32,
    pub critical_comp_time: __le32,
    pub temp_sensor: [__le16; 8usize],
    pub thm_temp1_trans_count: __le32,
    pub thm_temp2_trans_count: __le32,
    pub thm_temp1_total_time: __le32,
    pub thm_temp2_total_time: __le32,
    pub rsvd232: [__u8; 280usize],
}
impl Default for nvme_smart_log {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvme_fw_slot_info_log {
    pub afi: __u8,
    pub rsvd1: [__u8; 7usize],
    pub frs: [__le64; 7usize],
    pub rsvd64: [__u8; 448usize],
}
impl Default for nvme_fw_slot_info_log {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NVME_CMD_EFFECTS_CSUPP: _bindgen_ty_19 = 1;
pub const NVME_CMD_EFFECTS_LBCC: _bindgen_ty_19 = 2;
pub const NVME_CMD_EFFECTS_NCC: _bindgen_ty_19 = 4;
pub const NVME_CMD_EFFECTS_NIC: _bindgen_ty_19 = 8;
pub const NVME_CMD_EFFECTS_CCC: _bindgen_ty_19 = 16;
pub const NVME_CMD_EFFECTS_CSE_MASK: _bindgen_ty_19 = 458752;
pub const NVME_CMD_EFFECTS_UUID_SEL: _bindgen_ty_19 = 524288;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvme_effects_log {
    pub acs: [__le32; 256usize],
    pub iocs: [__le32; 256usize],
    pub resv: [__u8; 2048usize],
}
impl Default for nvme_effects_log {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const nvme_ana_state_NVME_ANA_OPTIMIZED: nvme_ana_state = 1;
pub const nvme_ana_state_NVME_ANA_NONOPTIMIZED: nvme_ana_state = 2;
pub const nvme_ana_state_NVME_ANA_INACCESSIBLE: nvme_ana_state = 3;
pub const nvme_ana_state_NVME_ANA_PERSISTENT_LOSS: nvme_ana_state = 4;
pub const nvme_ana_state_NVME_ANA_CHANGE: nvme_ana_state = 15;
pub type nvme_ana_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default)]
pub struct nvme_ana_group_desc {
    pub grpid: __le32,
    pub nnsids: __le32,
    pub chgcnt: __le64,
    pub state: __u8,
    pub rsvd17: [__u8; 15usize],
    pub nsids: __IncompleteArrayField<__le32>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_ana_rsp_hdr {
    pub chgcnt: __le64,
    pub ngrps: __le16,
    pub rsvd10: [__le16; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_zone_descriptor {
    pub zt: __u8,
    pub zs: __u8,
    pub za: __u8,
    pub rsvd3: [__u8; 5usize],
    pub zcap: __le64,
    pub zslba: __le64,
    pub wp: __le64,
    pub rsvd32: [__u8; 32usize],
}
pub const NVME_ZONE_TYPE_SEQWRITE_REQ: _bindgen_ty_20 = 2;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct nvme_zone_report {
    pub nr_zones: __le64,
    pub resv8: [__u8; 56usize],
    pub entries: __IncompleteArrayField<nvme_zone_descriptor>,
}
impl Default for nvme_zone_report {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NVME_SMART_CRIT_SPARE: _bindgen_ty_21 = 1;
pub const NVME_SMART_CRIT_TEMPERATURE: _bindgen_ty_21 = 2;
pub const NVME_SMART_CRIT_RELIABILITY: _bindgen_ty_21 = 4;
pub const NVME_SMART_CRIT_MEDIA: _bindgen_ty_21 = 8;
pub const NVME_SMART_CRIT_VOLATILE_MEMORY: _bindgen_ty_21 = 16;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const NVME_AER_ERROR: _bindgen_ty_22 = 0;
pub const NVME_AER_SMART: _bindgen_ty_22 = 1;
pub const NVME_AER_NOTICE: _bindgen_ty_22 = 2;
pub const NVME_AER_CSS: _bindgen_ty_22 = 6;
pub const NVME_AER_VS: _bindgen_ty_22 = 7;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub const NVME_AER_ERROR_PERSIST_INT_ERR: _bindgen_ty_23 = 3;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const NVME_AER_NOTICE_NS_CHANGED: _bindgen_ty_24 = 0;
pub const NVME_AER_NOTICE_FW_ACT_STARTING: _bindgen_ty_24 = 1;
pub const NVME_AER_NOTICE_ANA: _bindgen_ty_24 = 3;
pub const NVME_AER_NOTICE_DISC_CHANGED: _bindgen_ty_24 = 240;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const NVME_AEN_BIT_NS_ATTR: _bindgen_ty_25 = 8;
pub const NVME_AEN_BIT_FW_ACT: _bindgen_ty_25 = 9;
pub const NVME_AEN_BIT_ANA_CHANGE: _bindgen_ty_25 = 11;
pub const NVME_AEN_BIT_DISC_CHANGE: _bindgen_ty_25 = 31;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const NVME_AEN_CFG_NS_ATTR: _bindgen_ty_26 = 256;
pub const NVME_AEN_CFG_FW_ACT: _bindgen_ty_26 = 512;
pub const NVME_AEN_CFG_ANA_CHANGE: _bindgen_ty_26 = 2048;
pub const NVME_AEN_CFG_DISC_CHANGE: _bindgen_ty_26 = -2147483648;
pub type _bindgen_ty_26 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_lba_range_type {
    pub type_: __u8,
    pub attributes: __u8,
    pub rsvd2: [__u8; 14usize],
    pub slba: __le64,
    pub nlb: __le64,
    pub guid: [__u8; 16usize],
    pub rsvd48: [__u8; 16usize],
}
pub const NVME_LBART_TYPE_FS: _bindgen_ty_27 = 1;
pub const NVME_LBART_TYPE_RAID: _bindgen_ty_27 = 2;
pub const NVME_LBART_TYPE_CACHE: _bindgen_ty_27 = 3;
pub const NVME_LBART_TYPE_SWAP: _bindgen_ty_27 = 4;
pub const NVME_LBART_ATTRIB_TEMP: _bindgen_ty_27 = 1;
pub const NVME_LBART_ATTRIB_HIDE: _bindgen_ty_27 = 2;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default)]
pub struct nvme_reservation_status {
    pub gen: __le32,
    pub rtype: __u8,
    pub regctl: [__u8; 2usize],
    pub resv5: [__u8; 2usize],
    pub ptpls: __u8,
    pub resv10: [__u8; 13usize],
    pub regctl_ds: __IncompleteArrayField<nvme_reservation_status__bindgen_ty_1>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_reservation_status__bindgen_ty_1 {
    pub cntlid: __le16,
    pub rcsts: __u8,
    pub resv3: [__u8; 5usize],
    pub hostid: __le64,
    pub rkey: __le64,
}
pub const nvme_async_event_type_NVME_AER_TYPE_ERROR: nvme_async_event_type = 0;
pub const nvme_async_event_type_NVME_AER_TYPE_SMART: nvme_async_event_type = 1;
pub const nvme_async_event_type_NVME_AER_TYPE_NOTICE: nvme_async_event_type = 2;
pub type nvme_async_event_type = ::std::os::raw::c_uint;
pub const nvme_opcode_nvme_cmd_flush: nvme_opcode = 0;
pub const nvme_opcode_nvme_cmd_write: nvme_opcode = 1;
pub const nvme_opcode_nvme_cmd_read: nvme_opcode = 2;
pub const nvme_opcode_nvme_cmd_write_uncor: nvme_opcode = 4;
pub const nvme_opcode_nvme_cmd_compare: nvme_opcode = 5;
pub const nvme_opcode_nvme_cmd_write_zeroes: nvme_opcode = 8;
pub const nvme_opcode_nvme_cmd_dsm: nvme_opcode = 9;
pub const nvme_opcode_nvme_cmd_verify: nvme_opcode = 12;
pub const nvme_opcode_nvme_cmd_resv_register: nvme_opcode = 13;
pub const nvme_opcode_nvme_cmd_resv_report: nvme_opcode = 14;
pub const nvme_opcode_nvme_cmd_resv_acquire: nvme_opcode = 17;
pub const nvme_opcode_nvme_cmd_resv_release: nvme_opcode = 21;
pub const nvme_opcode_nvme_cmd_zone_mgmt_send: nvme_opcode = 121;
pub const nvme_opcode_nvme_cmd_zone_mgmt_recv: nvme_opcode = 122;
pub const nvme_opcode_nvme_cmd_zone_append: nvme_opcode = 125;
pub type nvme_opcode = ::std::os::raw::c_uint;
pub const NVME_SGL_FMT_ADDRESS: _bindgen_ty_28 = 0;
pub const NVME_SGL_FMT_OFFSET: _bindgen_ty_28 = 1;
pub const NVME_SGL_FMT_TRANSPORT_A: _bindgen_ty_28 = 10;
pub const NVME_SGL_FMT_INVALIDATE: _bindgen_ty_28 = 15;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
pub const NVME_SGL_FMT_DATA_DESC: _bindgen_ty_29 = 0;
pub const NVME_SGL_FMT_SEG_DESC: _bindgen_ty_29 = 2;
pub const NVME_SGL_FMT_LAST_SEG_DESC: _bindgen_ty_29 = 3;
pub const NVME_KEY_SGL_FMT_DATA_DESC: _bindgen_ty_29 = 4;
pub const NVME_TRANSPORT_SGL_DATA_DESC: _bindgen_ty_29 = 5;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_sgl_desc {
    pub addr: __le64,
    pub length: __le32,
    pub rsvd: [__u8; 3usize],
    pub type_: __u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_keyed_sgl_desc {
    pub addr: __le64,
    pub length: [__u8; 3usize],
    pub key: [__u8; 4usize],
    pub type_: __u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvme_data_ptr {
    pub __bindgen_anon_1: nvme_data_ptr__bindgen_ty_1,
    pub sgl: nvme_sgl_desc,
    pub ksgl: nvme_keyed_sgl_desc,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_data_ptr__bindgen_ty_1 {
    pub prp1: __le64,
    pub prp2: __le64,
}
impl Default for nvme_data_ptr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NVME_CMD_FUSE_FIRST: _bindgen_ty_30 = 1;
pub const NVME_CMD_FUSE_SECOND: _bindgen_ty_30 = 2;
pub const NVME_CMD_SGL_METABUF: _bindgen_ty_30 = 64;
pub const NVME_CMD_SGL_METASEG: _bindgen_ty_30 = 128;
pub const NVME_CMD_SGL_ALL: _bindgen_ty_30 = 192;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_common_command {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub cdw2: [__le32; 2usize],
    pub metadata: __le64,
    pub dptr: nvme_data_ptr,
    pub cdw10: __le32,
    pub cdw11: __le32,
    pub cdw12: __le32,
    pub cdw13: __le32,
    pub cdw14: __le32,
    pub cdw15: __le32,
}
impl Default for nvme_common_command {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_rw_command {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub rsvd2: __u64,
    pub metadata: __le64,
    pub dptr: nvme_data_ptr,
    pub slba: __le64,
    pub length: __le16,
    pub control: __le16,
    pub dsmgmt: __le32,
    pub reftag: __le32,
    pub apptag: __le16,
    pub appmask: __le16,
}
impl Default for nvme_rw_command {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NVME_RW_LR: _bindgen_ty_31 = 32768;
pub const NVME_RW_FUA: _bindgen_ty_31 = 16384;
pub const NVME_RW_APPEND_PIREMAP: _bindgen_ty_31 = 512;
pub const NVME_RW_DSM_FREQ_UNSPEC: _bindgen_ty_31 = 0;
pub const NVME_RW_DSM_FREQ_TYPICAL: _bindgen_ty_31 = 1;
pub const NVME_RW_DSM_FREQ_RARE: _bindgen_ty_31 = 2;
pub const NVME_RW_DSM_FREQ_READS: _bindgen_ty_31 = 3;
pub const NVME_RW_DSM_FREQ_WRITES: _bindgen_ty_31 = 4;
pub const NVME_RW_DSM_FREQ_RW: _bindgen_ty_31 = 5;
pub const NVME_RW_DSM_FREQ_ONCE: _bindgen_ty_31 = 6;
pub const NVME_RW_DSM_FREQ_PREFETCH: _bindgen_ty_31 = 7;
pub const NVME_RW_DSM_FREQ_TEMP: _bindgen_ty_31 = 8;
pub const NVME_RW_DSM_LATENCY_NONE: _bindgen_ty_31 = 0;
pub const NVME_RW_DSM_LATENCY_IDLE: _bindgen_ty_31 = 16;
pub const NVME_RW_DSM_LATENCY_NORM: _bindgen_ty_31 = 32;
pub const NVME_RW_DSM_LATENCY_LOW: _bindgen_ty_31 = 48;
pub const NVME_RW_DSM_SEQ_REQ: _bindgen_ty_31 = 64;
pub const NVME_RW_DSM_COMPRESSED: _bindgen_ty_31 = 128;
pub const NVME_RW_PRINFO_PRCHK_REF: _bindgen_ty_31 = 1024;
pub const NVME_RW_PRINFO_PRCHK_APP: _bindgen_ty_31 = 2048;
pub const NVME_RW_PRINFO_PRCHK_GUARD: _bindgen_ty_31 = 4096;
pub const NVME_RW_PRINFO_PRACT: _bindgen_ty_31 = 8192;
pub const NVME_RW_DTYPE_STREAMS: _bindgen_ty_31 = 16;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_dsm_cmd {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub rsvd2: [__u64; 2usize],
    pub dptr: nvme_data_ptr,
    pub nr: __le32,
    pub attributes: __le32,
    pub rsvd12: [__u32; 4usize],
}
impl Default for nvme_dsm_cmd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NVME_DSMGMT_IDR: _bindgen_ty_32 = 1;
pub const NVME_DSMGMT_IDW: _bindgen_ty_32 = 2;
pub const NVME_DSMGMT_AD: _bindgen_ty_32 = 4;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_dsm_range {
    pub cattr: __le32,
    pub nlb: __le32,
    pub slba: __le64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_write_zeroes_cmd {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub rsvd2: __u64,
    pub metadata: __le64,
    pub dptr: nvme_data_ptr,
    pub slba: __le64,
    pub length: __le16,
    pub control: __le16,
    pub dsmgmt: __le32,
    pub reftag: __le32,
    pub apptag: __le16,
    pub appmask: __le16,
}
impl Default for nvme_write_zeroes_cmd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const nvme_zone_mgmt_action_NVME_ZONE_CLOSE: nvme_zone_mgmt_action = 1;
pub const nvme_zone_mgmt_action_NVME_ZONE_FINISH: nvme_zone_mgmt_action = 2;
pub const nvme_zone_mgmt_action_NVME_ZONE_OPEN: nvme_zone_mgmt_action = 3;
pub const nvme_zone_mgmt_action_NVME_ZONE_RESET: nvme_zone_mgmt_action = 4;
pub const nvme_zone_mgmt_action_NVME_ZONE_OFFLINE: nvme_zone_mgmt_action = 5;
pub const nvme_zone_mgmt_action_NVME_ZONE_SET_DESC_EXT: nvme_zone_mgmt_action = 16;
pub type nvme_zone_mgmt_action = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_zone_mgmt_send_cmd {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub cdw2: [__le32; 2usize],
    pub metadata: __le64,
    pub dptr: nvme_data_ptr,
    pub slba: __le64,
    pub cdw12: __le32,
    pub zsa: __u8,
    pub select_all: __u8,
    pub rsvd13: [__u8; 2usize],
    pub cdw14: [__le32; 2usize],
}
impl Default for nvme_zone_mgmt_send_cmd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_zone_mgmt_recv_cmd {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub rsvd2: [__le64; 2usize],
    pub dptr: nvme_data_ptr,
    pub slba: __le64,
    pub numd: __le32,
    pub zra: __u8,
    pub zrasf: __u8,
    pub pr: __u8,
    pub rsvd13: __u8,
    pub cdw14: [__le32; 2usize],
}
impl Default for nvme_zone_mgmt_recv_cmd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NVME_ZRA_ZONE_REPORT: _bindgen_ty_33 = 0;
pub const NVME_ZRASF_ZONE_REPORT_ALL: _bindgen_ty_33 = 0;
pub const NVME_ZRASF_ZONE_STATE_EMPTY: _bindgen_ty_33 = 1;
pub const NVME_ZRASF_ZONE_STATE_IMP_OPEN: _bindgen_ty_33 = 2;
pub const NVME_ZRASF_ZONE_STATE_EXP_OPEN: _bindgen_ty_33 = 3;
pub const NVME_ZRASF_ZONE_STATE_CLOSED: _bindgen_ty_33 = 4;
pub const NVME_ZRASF_ZONE_STATE_READONLY: _bindgen_ty_33 = 5;
pub const NVME_ZRASF_ZONE_STATE_FULL: _bindgen_ty_33 = 6;
pub const NVME_ZRASF_ZONE_STATE_OFFLINE: _bindgen_ty_33 = 7;
pub const NVME_REPORT_ZONE_PARTIAL: _bindgen_ty_33 = 1;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
pub const NVME_TEMP_THRESH_MASK: _bindgen_ty_34 = 65535;
pub const NVME_TEMP_THRESH_SELECT_SHIFT: _bindgen_ty_34 = 16;
pub const NVME_TEMP_THRESH_TYPE_UNDER: _bindgen_ty_34 = 1048576;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_feat_auto_pst {
    pub entries: [__le64; 32usize],
}
pub const NVME_HOST_MEM_ENABLE: _bindgen_ty_35 = 1;
pub const NVME_HOST_MEM_RETURN: _bindgen_ty_35 = 2;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvme_feat_host_behavior {
    pub acre: __u8,
    pub resv1: [__u8; 511usize],
}
impl Default for nvme_feat_host_behavior {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NVME_ENABLE_ACRE: _bindgen_ty_36 = 1;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
pub const nvme_admin_opcode_nvme_admin_delete_sq: nvme_admin_opcode = 0;
pub const nvme_admin_opcode_nvme_admin_create_sq: nvme_admin_opcode = 1;
pub const nvme_admin_opcode_nvme_admin_get_log_page: nvme_admin_opcode = 2;
pub const nvme_admin_opcode_nvme_admin_delete_cq: nvme_admin_opcode = 4;
pub const nvme_admin_opcode_nvme_admin_create_cq: nvme_admin_opcode = 5;
pub const nvme_admin_opcode_nvme_admin_identify: nvme_admin_opcode = 6;
pub const nvme_admin_opcode_nvme_admin_abort_cmd: nvme_admin_opcode = 8;
pub const nvme_admin_opcode_nvme_admin_set_features: nvme_admin_opcode = 9;
pub const nvme_admin_opcode_nvme_admin_get_features: nvme_admin_opcode = 10;
pub const nvme_admin_opcode_nvme_admin_async_event: nvme_admin_opcode = 12;
pub const nvme_admin_opcode_nvme_admin_ns_mgmt: nvme_admin_opcode = 13;
pub const nvme_admin_opcode_nvme_admin_activate_fw: nvme_admin_opcode = 16;
pub const nvme_admin_opcode_nvme_admin_download_fw: nvme_admin_opcode = 17;
pub const nvme_admin_opcode_nvme_admin_dev_self_test: nvme_admin_opcode = 20;
pub const nvme_admin_opcode_nvme_admin_ns_attach: nvme_admin_opcode = 21;
pub const nvme_admin_opcode_nvme_admin_keep_alive: nvme_admin_opcode = 24;
pub const nvme_admin_opcode_nvme_admin_directive_send: nvme_admin_opcode = 25;
pub const nvme_admin_opcode_nvme_admin_directive_recv: nvme_admin_opcode = 26;
pub const nvme_admin_opcode_nvme_admin_virtual_mgmt: nvme_admin_opcode = 28;
pub const nvme_admin_opcode_nvme_admin_nvme_mi_send: nvme_admin_opcode = 29;
pub const nvme_admin_opcode_nvme_admin_nvme_mi_recv: nvme_admin_opcode = 30;
pub const nvme_admin_opcode_nvme_admin_dbbuf: nvme_admin_opcode = 124;
pub const nvme_admin_opcode_nvme_admin_format_nvm: nvme_admin_opcode = 128;
pub const nvme_admin_opcode_nvme_admin_security_send: nvme_admin_opcode = 129;
pub const nvme_admin_opcode_nvme_admin_security_recv: nvme_admin_opcode = 130;
pub const nvme_admin_opcode_nvme_admin_sanitize_nvm: nvme_admin_opcode = 132;
pub const nvme_admin_opcode_nvme_admin_get_lba_status: nvme_admin_opcode = 134;
pub const nvme_admin_opcode_nvme_admin_vendor_start: nvme_admin_opcode = 192;
pub type nvme_admin_opcode = ::std::os::raw::c_uint;
pub const NVME_QUEUE_PHYS_CONTIG: _bindgen_ty_37 = 1;
pub const NVME_CQ_IRQ_ENABLED: _bindgen_ty_37 = 2;
pub const NVME_SQ_PRIO_URGENT: _bindgen_ty_37 = 0;
pub const NVME_SQ_PRIO_HIGH: _bindgen_ty_37 = 2;
pub const NVME_SQ_PRIO_MEDIUM: _bindgen_ty_37 = 4;
pub const NVME_SQ_PRIO_LOW: _bindgen_ty_37 = 6;
pub const NVME_FEAT_ARBITRATION: _bindgen_ty_37 = 1;
pub const NVME_FEAT_POWER_MGMT: _bindgen_ty_37 = 2;
pub const NVME_FEAT_LBA_RANGE: _bindgen_ty_37 = 3;
pub const NVME_FEAT_TEMP_THRESH: _bindgen_ty_37 = 4;
pub const NVME_FEAT_ERR_RECOVERY: _bindgen_ty_37 = 5;
pub const NVME_FEAT_VOLATILE_WC: _bindgen_ty_37 = 6;
pub const NVME_FEAT_NUM_QUEUES: _bindgen_ty_37 = 7;
pub const NVME_FEAT_IRQ_COALESCE: _bindgen_ty_37 = 8;
pub const NVME_FEAT_IRQ_CONFIG: _bindgen_ty_37 = 9;
pub const NVME_FEAT_WRITE_ATOMIC: _bindgen_ty_37 = 10;
pub const NVME_FEAT_ASYNC_EVENT: _bindgen_ty_37 = 11;
pub const NVME_FEAT_AUTO_PST: _bindgen_ty_37 = 12;
pub const NVME_FEAT_HOST_MEM_BUF: _bindgen_ty_37 = 13;
pub const NVME_FEAT_TIMESTAMP: _bindgen_ty_37 = 14;
pub const NVME_FEAT_KATO: _bindgen_ty_37 = 15;
pub const NVME_FEAT_HCTM: _bindgen_ty_37 = 16;
pub const NVME_FEAT_NOPSC: _bindgen_ty_37 = 17;
pub const NVME_FEAT_RRL: _bindgen_ty_37 = 18;
pub const NVME_FEAT_PLM_CONFIG: _bindgen_ty_37 = 19;
pub const NVME_FEAT_PLM_WINDOW: _bindgen_ty_37 = 20;
pub const NVME_FEAT_HOST_BEHAVIOR: _bindgen_ty_37 = 22;
pub const NVME_FEAT_SANITIZE: _bindgen_ty_37 = 23;
pub const NVME_FEAT_SW_PROGRESS: _bindgen_ty_37 = 128;
pub const NVME_FEAT_HOST_ID: _bindgen_ty_37 = 129;
pub const NVME_FEAT_RESV_MASK: _bindgen_ty_37 = 130;
pub const NVME_FEAT_RESV_PERSIST: _bindgen_ty_37 = 131;
pub const NVME_FEAT_WRITE_PROTECT: _bindgen_ty_37 = 132;
pub const NVME_FEAT_VENDOR_START: _bindgen_ty_37 = 192;
pub const NVME_FEAT_VENDOR_END: _bindgen_ty_37 = 255;
pub const NVME_LOG_ERROR: _bindgen_ty_37 = 1;
pub const NVME_LOG_SMART: _bindgen_ty_37 = 2;
pub const NVME_LOG_FW_SLOT: _bindgen_ty_37 = 3;
pub const NVME_LOG_CHANGED_NS: _bindgen_ty_37 = 4;
pub const NVME_LOG_CMD_EFFECTS: _bindgen_ty_37 = 5;
pub const NVME_LOG_DEVICE_SELF_TEST: _bindgen_ty_37 = 6;
pub const NVME_LOG_TELEMETRY_HOST: _bindgen_ty_37 = 7;
pub const NVME_LOG_TELEMETRY_CTRL: _bindgen_ty_37 = 8;
pub const NVME_LOG_ENDURANCE_GROUP: _bindgen_ty_37 = 9;
pub const NVME_LOG_ANA: _bindgen_ty_37 = 12;
pub const NVME_LOG_DISC: _bindgen_ty_37 = 112;
pub const NVME_LOG_RESERVATION: _bindgen_ty_37 = 128;
pub const NVME_FWACT_REPL: _bindgen_ty_37 = 0;
pub const NVME_FWACT_REPL_ACTV: _bindgen_ty_37 = 8;
pub const NVME_FWACT_ACTV: _bindgen_ty_37 = 16;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
pub const NVME_NS_NO_WRITE_PROTECT: _bindgen_ty_38 = 0;
pub const NVME_NS_WRITE_PROTECT: _bindgen_ty_38 = 1;
pub const NVME_NS_WRITE_PROTECT_POWER_CYCLE: _bindgen_ty_38 = 2;
pub const NVME_NS_WRITE_PROTECT_PERMANENT: _bindgen_ty_38 = 3;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_identify {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub rsvd2: [__u64; 2usize],
    pub dptr: nvme_data_ptr,
    pub cns: __u8,
    pub rsvd3: __u8,
    pub ctrlid: __le16,
    pub rsvd11: [__u8; 3usize],
    pub csi: __u8,
    pub rsvd12: [__u32; 4usize],
}
impl Default for nvme_identify {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_features {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub rsvd2: [__u64; 2usize],
    pub dptr: nvme_data_ptr,
    pub fid: __le32,
    pub dword11: __le32,
    pub dword12: __le32,
    pub dword13: __le32,
    pub dword14: __le32,
    pub dword15: __le32,
}
impl Default for nvme_features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_host_mem_buf_desc {
    pub addr: __le64,
    pub size: __le32,
    pub rsvd: __u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_create_cq {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub rsvd1: [__u32; 5usize],
    pub prp1: __le64,
    pub rsvd8: __u64,
    pub cqid: __le16,
    pub qsize: __le16,
    pub cq_flags: __le16,
    pub irq_vector: __le16,
    pub rsvd12: [__u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_create_sq {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub rsvd1: [__u32; 5usize],
    pub prp1: __le64,
    pub rsvd8: __u64,
    pub sqid: __le16,
    pub qsize: __le16,
    pub sq_flags: __le16,
    pub cqid: __le16,
    pub rsvd12: [__u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_delete_queue {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub rsvd1: [__u32; 9usize],
    pub qid: __le16,
    pub rsvd10: __u16,
    pub rsvd11: [__u32; 5usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_abort_cmd {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub rsvd1: [__u32; 9usize],
    pub sqid: __le16,
    pub cid: __u16,
    pub rsvd11: [__u32; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_download_firmware {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub rsvd1: [__u32; 5usize],
    pub dptr: nvme_data_ptr,
    pub numd: __le32,
    pub offset: __le32,
    pub rsvd12: [__u32; 4usize],
}
impl Default for nvme_download_firmware {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_format_cmd {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub rsvd2: [__u64; 4usize],
    pub cdw10: __le32,
    pub rsvd11: [__u32; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_get_log_page_command {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub rsvd2: [__u64; 2usize],
    pub dptr: nvme_data_ptr,
    pub lid: __u8,
    pub lsp: __u8,
    pub numdl: __le16,
    pub numdu: __le16,
    pub rsvd11: __u16,
    pub __bindgen_anon_1: nvme_get_log_page_command__bindgen_ty_1,
    pub rsvd14: [__u8; 3usize],
    pub csi: __u8,
    pub rsvd15: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvme_get_log_page_command__bindgen_ty_1 {
    pub __bindgen_anon_1: nvme_get_log_page_command__bindgen_ty_1__bindgen_ty_1,
    pub lpo: __le64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_get_log_page_command__bindgen_ty_1__bindgen_ty_1 {
    pub lpol: __le32,
    pub lpou: __le32,
}
impl Default for nvme_get_log_page_command__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for nvme_get_log_page_command {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_directive_cmd {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub nsid: __le32,
    pub rsvd2: [__u64; 2usize],
    pub dptr: nvme_data_ptr,
    pub numd: __le32,
    pub doper: __u8,
    pub dtype: __u8,
    pub dspec: __le16,
    pub endir: __u8,
    pub tdtype: __u8,
    pub rsvd15: __u16,
    pub rsvd16: [__u32; 3usize],
}
impl Default for nvme_directive_cmd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const nvmf_fabrics_opcode_nvme_fabrics_command: nvmf_fabrics_opcode = 127;
pub type nvmf_fabrics_opcode = ::std::os::raw::c_uint;
pub const nvmf_capsule_command_nvme_fabrics_type_property_set: nvmf_capsule_command = 0;
pub const nvmf_capsule_command_nvme_fabrics_type_connect: nvmf_capsule_command = 1;
pub const nvmf_capsule_command_nvme_fabrics_type_property_get: nvmf_capsule_command = 4;
pub type nvmf_capsule_command = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmf_common_command {
    pub opcode: __u8,
    pub resv1: __u8,
    pub command_id: __u16,
    pub fctype: __u8,
    pub resv2: [__u8; 35usize],
    pub ts: [__u8; 24usize],
}
impl Default for nvmf_common_command {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvmf_disc_rsp_page_entry {
    pub trtype: __u8,
    pub adrfam: __u8,
    pub subtype: __u8,
    pub treq: __u8,
    pub portid: __le16,
    pub cntlid: __le16,
    pub asqsz: __le16,
    pub resv8: [__u8; 22usize],
    pub trsvcid: [::std::os::raw::c_char; 32usize],
    pub resv64: [__u8; 192usize],
    pub subnqn: [::std::os::raw::c_char; 256usize],
    pub traddr: [::std::os::raw::c_char; 256usize],
    pub tsas: nvmf_disc_rsp_page_entry_tsas,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvmf_disc_rsp_page_entry_tsas {
    pub common: [::std::os::raw::c_char; 256usize],
    pub rdma: nvmf_disc_rsp_page_entry_tsas_rdma,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmf_disc_rsp_page_entry_tsas_rdma {
    pub qptype: __u8,
    pub prtype: __u8,
    pub cms: __u8,
    pub resv3: [__u8; 5usize],
    pub pkey: __u16,
    pub resv10: [__u8; 246usize],
}
impl Default for nvmf_disc_rsp_page_entry_tsas_rdma {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for nvmf_disc_rsp_page_entry_tsas {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for nvmf_disc_rsp_page_entry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct nvmf_disc_rsp_page_hdr {
    pub genctr: __le64,
    pub numrec: __le64,
    pub recfmt: __le16,
    pub resv14: [__u8; 1006usize],
    pub entries: __IncompleteArrayField<nvmf_disc_rsp_page_entry>,
}
impl Default for nvmf_disc_rsp_page_hdr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const NVME_CONNECT_DISABLE_SQFLOW: _bindgen_ty_39 = 4;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvmf_connect_command {
    pub opcode: __u8,
    pub resv1: __u8,
    pub command_id: __u16,
    pub fctype: __u8,
    pub resv2: [__u8; 19usize],
    pub dptr: nvme_data_ptr,
    pub recfmt: __le16,
    pub qid: __le16,
    pub sqsize: __le16,
    pub cattr: __u8,
    pub resv3: __u8,
    pub kato: __le32,
    pub resv4: [__u8; 12usize],
}
impl Default for nvmf_connect_command {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmf_connect_data {
    pub hostid: uuid_t,
    pub cntlid: __le16,
    pub resv4: [::std::os::raw::c_char; 238usize],
    pub subsysnqn: [::std::os::raw::c_char; 256usize],
    pub hostnqn: [::std::os::raw::c_char; 256usize],
    pub resv5: [::std::os::raw::c_char; 256usize],
}
impl Default for nvmf_connect_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmf_property_set_command {
    pub opcode: __u8,
    pub resv1: __u8,
    pub command_id: __u16,
    pub fctype: __u8,
    pub resv2: [__u8; 35usize],
    pub attrib: __u8,
    pub resv3: [__u8; 3usize],
    pub offset: __le32,
    pub value: __le64,
    pub resv4: [__u8; 8usize],
}
impl Default for nvmf_property_set_command {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmf_property_get_command {
    pub opcode: __u8,
    pub resv1: __u8,
    pub command_id: __u16,
    pub fctype: __u8,
    pub resv2: [__u8; 35usize],
    pub attrib: __u8,
    pub resv3: [__u8; 3usize],
    pub offset: __le32,
    pub resv4: [__u8; 16usize],
}
impl Default for nvmf_property_get_command {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_dbbuf {
    pub opcode: __u8,
    pub flags: __u8,
    pub command_id: __u16,
    pub rsvd1: [__u32; 5usize],
    pub prp1: __le64,
    pub prp2: __le64,
    pub rsvd12: [__u32; 6usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct streams_directive_params {
    pub msl: __le16,
    pub nssa: __le16,
    pub nsso: __le16,
    pub rsvd: [__u8; 10usize],
    pub sws: __le32,
    pub sgs: __le16,
    pub nsa: __le16,
    pub nso: __le16,
    pub rsvd2: [__u8; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_command {
    pub __bindgen_anon_1: nvme_command__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvme_command__bindgen_ty_1 {
    pub common: nvme_common_command,
    pub rw: nvme_rw_command,
    pub identify: nvme_identify,
    pub features: nvme_features,
    pub create_cq: nvme_create_cq,
    pub create_sq: nvme_create_sq,
    pub delete_queue: nvme_delete_queue,
    pub dlfw: nvme_download_firmware,
    pub format: nvme_format_cmd,
    pub dsm: nvme_dsm_cmd,
    pub write_zeroes: nvme_write_zeroes_cmd,
    pub zms: nvme_zone_mgmt_send_cmd,
    pub zmr: nvme_zone_mgmt_recv_cmd,
    pub abort: nvme_abort_cmd,
    pub get_log_page: nvme_get_log_page_command,
    pub fabrics: nvmf_common_command,
    pub connect: nvmf_connect_command,
    pub prop_set: nvmf_property_set_command,
    pub prop_get: nvmf_property_get_command,
    pub dbbuf: nvme_dbbuf,
    pub directive: nvme_directive_cmd,
}
impl Default for nvme_command__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for nvme_command {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvme_error_slot {
    pub error_count: __le64,
    pub sqid: __le16,
    pub cmdid: __le16,
    pub status_field: __le16,
    pub param_error_location: __le16,
    pub lba: __le64,
    pub nsid: __le32,
    pub vs: __u8,
    pub resv: [__u8; 3usize],
    pub cs: __le64,
    pub resv2: [__u8; 24usize],
}
pub const NVME_SC_SUCCESS: _bindgen_ty_40 = 0;
pub const NVME_SC_INVALID_OPCODE: _bindgen_ty_40 = 1;
pub const NVME_SC_INVALID_FIELD: _bindgen_ty_40 = 2;
pub const NVME_SC_CMDID_CONFLICT: _bindgen_ty_40 = 3;
pub const NVME_SC_DATA_XFER_ERROR: _bindgen_ty_40 = 4;
pub const NVME_SC_POWER_LOSS: _bindgen_ty_40 = 5;
pub const NVME_SC_INTERNAL: _bindgen_ty_40 = 6;
pub const NVME_SC_ABORT_REQ: _bindgen_ty_40 = 7;
pub const NVME_SC_ABORT_QUEUE: _bindgen_ty_40 = 8;
pub const NVME_SC_FUSED_FAIL: _bindgen_ty_40 = 9;
pub const NVME_SC_FUSED_MISSING: _bindgen_ty_40 = 10;
pub const NVME_SC_INVALID_NS: _bindgen_ty_40 = 11;
pub const NVME_SC_CMD_SEQ_ERROR: _bindgen_ty_40 = 12;
pub const NVME_SC_SGL_INVALID_LAST: _bindgen_ty_40 = 13;
pub const NVME_SC_SGL_INVALID_COUNT: _bindgen_ty_40 = 14;
pub const NVME_SC_SGL_INVALID_DATA: _bindgen_ty_40 = 15;
pub const NVME_SC_SGL_INVALID_METADATA: _bindgen_ty_40 = 16;
pub const NVME_SC_SGL_INVALID_TYPE: _bindgen_ty_40 = 17;
pub const NVME_SC_CMB_INVALID_USE: _bindgen_ty_40 = 18;
pub const NVME_SC_PRP_INVALID_OFFSET: _bindgen_ty_40 = 19;
pub const NVME_SC_ATOMIC_WU_EXCEEDED: _bindgen_ty_40 = 20;
pub const NVME_SC_OP_DENIED: _bindgen_ty_40 = 21;
pub const NVME_SC_SGL_INVALID_OFFSET: _bindgen_ty_40 = 22;
pub const NVME_SC_RESERVED: _bindgen_ty_40 = 23;
pub const NVME_SC_HOST_ID_INCONSIST: _bindgen_ty_40 = 24;
pub const NVME_SC_KA_TIMEOUT_EXPIRED: _bindgen_ty_40 = 25;
pub const NVME_SC_KA_TIMEOUT_INVALID: _bindgen_ty_40 = 26;
pub const NVME_SC_ABORTED_PREEMPT_ABORT: _bindgen_ty_40 = 27;
pub const NVME_SC_SANITIZE_FAILED: _bindgen_ty_40 = 28;
pub const NVME_SC_SANITIZE_IN_PROGRESS: _bindgen_ty_40 = 29;
pub const NVME_SC_SGL_INVALID_GRANULARITY: _bindgen_ty_40 = 30;
pub const NVME_SC_CMD_NOT_SUP_CMB_QUEUE: _bindgen_ty_40 = 31;
pub const NVME_SC_NS_WRITE_PROTECTED: _bindgen_ty_40 = 32;
pub const NVME_SC_CMD_INTERRUPTED: _bindgen_ty_40 = 33;
pub const NVME_SC_TRANSIENT_TR_ERR: _bindgen_ty_40 = 34;
pub const NVME_SC_INVALID_IO_CMD_SET: _bindgen_ty_40 = 44;
pub const NVME_SC_LBA_RANGE: _bindgen_ty_40 = 128;
pub const NVME_SC_CAP_EXCEEDED: _bindgen_ty_40 = 129;
pub const NVME_SC_NS_NOT_READY: _bindgen_ty_40 = 130;
pub const NVME_SC_RESERVATION_CONFLICT: _bindgen_ty_40 = 131;
pub const NVME_SC_FORMAT_IN_PROGRESS: _bindgen_ty_40 = 132;
pub const NVME_SC_CQ_INVALID: _bindgen_ty_40 = 256;
pub const NVME_SC_QID_INVALID: _bindgen_ty_40 = 257;
pub const NVME_SC_QUEUE_SIZE: _bindgen_ty_40 = 258;
pub const NVME_SC_ABORT_LIMIT: _bindgen_ty_40 = 259;
pub const NVME_SC_ABORT_MISSING: _bindgen_ty_40 = 260;
pub const NVME_SC_ASYNC_LIMIT: _bindgen_ty_40 = 261;
pub const NVME_SC_FIRMWARE_SLOT: _bindgen_ty_40 = 262;
pub const NVME_SC_FIRMWARE_IMAGE: _bindgen_ty_40 = 263;
pub const NVME_SC_INVALID_VECTOR: _bindgen_ty_40 = 264;
pub const NVME_SC_INVALID_LOG_PAGE: _bindgen_ty_40 = 265;
pub const NVME_SC_INVALID_FORMAT: _bindgen_ty_40 = 266;
pub const NVME_SC_FW_NEEDS_CONV_RESET: _bindgen_ty_40 = 267;
pub const NVME_SC_INVALID_QUEUE: _bindgen_ty_40 = 268;
pub const NVME_SC_FEATURE_NOT_SAVEABLE: _bindgen_ty_40 = 269;
pub const NVME_SC_FEATURE_NOT_CHANGEABLE: _bindgen_ty_40 = 270;
pub const NVME_SC_FEATURE_NOT_PER_NS: _bindgen_ty_40 = 271;
pub const NVME_SC_FW_NEEDS_SUBSYS_RESET: _bindgen_ty_40 = 272;
pub const NVME_SC_FW_NEEDS_RESET: _bindgen_ty_40 = 273;
pub const NVME_SC_FW_NEEDS_MAX_TIME: _bindgen_ty_40 = 274;
pub const NVME_SC_FW_ACTIVATE_PROHIBITED: _bindgen_ty_40 = 275;
pub const NVME_SC_OVERLAPPING_RANGE: _bindgen_ty_40 = 276;
pub const NVME_SC_NS_INSUFFICIENT_CAP: _bindgen_ty_40 = 277;
pub const NVME_SC_NS_ID_UNAVAILABLE: _bindgen_ty_40 = 278;
pub const NVME_SC_NS_ALREADY_ATTACHED: _bindgen_ty_40 = 280;
pub const NVME_SC_NS_IS_PRIVATE: _bindgen_ty_40 = 281;
pub const NVME_SC_NS_NOT_ATTACHED: _bindgen_ty_40 = 282;
pub const NVME_SC_THIN_PROV_NOT_SUPP: _bindgen_ty_40 = 283;
pub const NVME_SC_CTRL_LIST_INVALID: _bindgen_ty_40 = 284;
pub const NVME_SC_SELT_TEST_IN_PROGRESS: _bindgen_ty_40 = 285;
pub const NVME_SC_BP_WRITE_PROHIBITED: _bindgen_ty_40 = 286;
pub const NVME_SC_CTRL_ID_INVALID: _bindgen_ty_40 = 287;
pub const NVME_SC_SEC_CTRL_STATE_INVALID: _bindgen_ty_40 = 288;
pub const NVME_SC_CTRL_RES_NUM_INVALID: _bindgen_ty_40 = 289;
pub const NVME_SC_RES_ID_INVALID: _bindgen_ty_40 = 290;
pub const NVME_SC_PMR_SAN_PROHIBITED: _bindgen_ty_40 = 291;
pub const NVME_SC_ANA_GROUP_ID_INVALID: _bindgen_ty_40 = 292;
pub const NVME_SC_ANA_ATTACH_FAILED: _bindgen_ty_40 = 293;
pub const NVME_SC_BAD_ATTRIBUTES: _bindgen_ty_40 = 384;
pub const NVME_SC_INVALID_PI: _bindgen_ty_40 = 385;
pub const NVME_SC_READ_ONLY: _bindgen_ty_40 = 386;
pub const NVME_SC_ONCS_NOT_SUPPORTED: _bindgen_ty_40 = 387;
pub const NVME_SC_CONNECT_FORMAT: _bindgen_ty_40 = 384;
pub const NVME_SC_CONNECT_CTRL_BUSY: _bindgen_ty_40 = 385;
pub const NVME_SC_CONNECT_INVALID_PARAM: _bindgen_ty_40 = 386;
pub const NVME_SC_CONNECT_RESTART_DISC: _bindgen_ty_40 = 387;
pub const NVME_SC_CONNECT_INVALID_HOST: _bindgen_ty_40 = 388;
pub const NVME_SC_DISCOVERY_RESTART: _bindgen_ty_40 = 400;
pub const NVME_SC_AUTH_REQUIRED: _bindgen_ty_40 = 401;
pub const NVME_SC_ZONE_BOUNDARY_ERROR: _bindgen_ty_40 = 440;
pub const NVME_SC_ZONE_FULL: _bindgen_ty_40 = 441;
pub const NVME_SC_ZONE_READ_ONLY: _bindgen_ty_40 = 442;
pub const NVME_SC_ZONE_OFFLINE: _bindgen_ty_40 = 443;
pub const NVME_SC_ZONE_INVALID_WRITE: _bindgen_ty_40 = 444;
pub const NVME_SC_ZONE_TOO_MANY_ACTIVE: _bindgen_ty_40 = 445;
pub const NVME_SC_ZONE_TOO_MANY_OPEN: _bindgen_ty_40 = 446;
pub const NVME_SC_ZONE_INVALID_TRANSITION: _bindgen_ty_40 = 447;
pub const NVME_SC_WRITE_FAULT: _bindgen_ty_40 = 640;
pub const NVME_SC_READ_ERROR: _bindgen_ty_40 = 641;
pub const NVME_SC_GUARD_CHECK: _bindgen_ty_40 = 642;
pub const NVME_SC_APPTAG_CHECK: _bindgen_ty_40 = 643;
pub const NVME_SC_REFTAG_CHECK: _bindgen_ty_40 = 644;
pub const NVME_SC_COMPARE_FAILED: _bindgen_ty_40 = 645;
pub const NVME_SC_ACCESS_DENIED: _bindgen_ty_40 = 646;
pub const NVME_SC_UNWRITTEN_BLOCK: _bindgen_ty_40 = 647;
pub const NVME_SC_ANA_PERSISTENT_LOSS: _bindgen_ty_40 = 769;
pub const NVME_SC_ANA_INACCESSIBLE: _bindgen_ty_40 = 770;
pub const NVME_SC_ANA_TRANSITION: _bindgen_ty_40 = 771;
pub const NVME_SC_HOST_PATH_ERROR: _bindgen_ty_40 = 880;
pub const NVME_SC_HOST_ABORTED_CMD: _bindgen_ty_40 = 881;
pub const NVME_SC_CRD: _bindgen_ty_40 = 6144;
pub const NVME_SC_DNR: _bindgen_ty_40 = 16384;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvme_completion {
    pub result: nvme_completion_nvme_result,
    pub sq_head: __le16,
    pub sq_id: __le16,
    pub command_id: __u16,
    pub status: __le16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvme_completion_nvme_result {
    pub u16_: __le16,
    pub u32_: __le32,
    pub u64_: __le64,
}
impl Default for nvme_completion_nvme_result {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for nvme_completion {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
